name: CI/CD Pipeline - Spartan Market API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.13'
  POSTGRES_VERSION: '16'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Tests y Cobertura
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: spartan_market_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Instalar dependencias del sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client curl

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar dependencias Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Configurar variables de entorno
      run: |
        cp env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://test_user:test_pass@localhost:5432/spartan_market_test" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "TESTING=true" >> .env
        echo "ENVIRONMENT=testing" >> .env
        echo "SENTRY_DSN=" >> .env
        echo "BREVO_API_KEY=" >> .env
        echo "FIREBASE_PROJECT_ID=test-project" >> .env

    - name: Ejecutar migraciones
      run: |
        alembic upgrade head

    - name: Ejecutar tests de API
      run: |
        python test_api_endpoints.py

    - name: Ejecutar tests de MercadoPago
      run: |
        python test_mercadopago.py

    - name: Ejecutar tests con pytest
      run: |
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Subir reporte de cobertura
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Verificar cobertura m√≠nima
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        echo "Cobertura actual: $COVERAGE%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "‚ùå Cobertura insuficiente: $COVERAGE% (m√≠nimo 70%)"
          exit 1
        else
          echo "‚úÖ Cobertura aceptable: $COVERAGE%"
        fi

  security:
    name: An√°lisis de Seguridad
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Instalar herramientas de seguridad
      run: |
        pip install bandit safety

    - name: Ejecutar an√°lisis de seguridad con bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Verificar vulnerabilidades con safety
      run: |
        safety check --json --output safety-report.json || true

    - name: Subir reportes de seguridad
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  lint:
    name: Linting y Formato
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Instalar herramientas de linting
      run: |
        pip install flake8 black isort mypy

    - name: Verificar formato con Black
      run: |
        black --check --diff app/

    - name: Verificar imports con isort
      run: |
        isort --check-only --diff app/

    - name: Ejecutar flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Verificar tipos con mypy
      run: |
        mypy app/ --ignore-missing-imports

  docker-test:
    name: Test Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Construir imagen Docker
      run: |
        docker build -t spartan-market-api:test .

    - name: Verificar imagen
      run: |
        docker run --rm spartan-market-api:test python -c "import app; print('‚úÖ App imports successfully')"

  build:
    name: Construir y Desplegar
    needs: [test, security, lint, docker-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extraer metadatos
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: spartanmarket/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Construir y subir imagen
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Desplegar a staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "üöÄ Desplegando a staging..."
        # Aqu√≠ ir√≠an los comandos para desplegar a staging

    - name: Desplegar a producci√≥n
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Desplegando a producci√≥n..."
        # Aqu√≠ ir√≠an los comandos para desplegar a producci√≥n

  notify:
    name: Notificar Resultados
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notificar a Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always() 